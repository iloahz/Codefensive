const long long ______________________ = 30LL;
const long long _________________ = 10005LL;
const long long _____________________ = 1000LL;
const long long ___________________________ = 10LL;
const long long ____________________ = 8LL;
const long long __________________ = 1000000007LL;
const long long __________________________ = 100LL;
const long long ________________________ = 3LL;
const long long _________________________ = 2LL;
const long long ___________________ = 1LL;
const long long _______________________ = 0LL;

#include <map>
#include <cmath>
#include <queue>
#include <string>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>

#define MAXN _________________
#define M __________________
#define EPS ___________________e-____________________

using namespace std;

const char* _[] = {"nil","un","bi","tri","quad","pent","hex","sept","oct","enn","ium"};
char __[_____________________][______________________];
map<string,int> ___;

void ____(char* ________________,int& __________,const char* _________){
    int _____;
    _____ = _______________________;
    if (strcmp(_________,"nil")==_______________________){
        if (________________[__________-________________________]=='e' && ________________[__________-_________________________]=='n' && ________________[__________-___________________]=='n') _____ = ___________________;
    }
    if (strcmp(_________,"ium")==_______________________){
        if (________________[__________-___________________]=='i') _____ = ___________________;
    }
    for (;_____<strlen(_________);_____++){
        ________________[__________++] = _________[_____];
    }
}

void ______(int _______________){
    int _______,________,_________;
    _______ = _______________ / __________________________;
    ________ = (_______________ % __________________________) / ___________________________;
    _________ = _______________ % ___________________________;
    int __________ = _______________________;
    ____(__[_______________],__________,_[_______]);
    ____(__[_______________],__________,_[________]);
    ____(__[_______________],__________,_[_________]);
    ____(__[_______________],__________,_[___________________________]);
    __[_______________][__________] = '\0';
    __[_______________][_______________________] += 'A' - 'a';
    //printf("%d %s\n",_______________,__[_______________]);
    string ___________(__[_______________]);
    ___[___________] = _______________;
}

void ____________(){
    int _____;
    ___.clear();
    for (_____=__________________________;_____<_____________________;_____++){
        ______(_____);
    }
}

int main(){
#ifdef ILOAHZ___________________
    freopen("i.in","r",stdin);
    //freopen(".out","w",stdout);
#endif
    int _____________,______________,_______________;
    char ___________[______________________];
    ____________();
    scanf("%d",&_____________);
    while (_____________--){
        scanf("%d",&______________);
        if (______________==___________________){
            scanf("%d",&_______________);
            printf("%s\n",__[_______________]);
        }
        else{
            scanf("%s",___________);
            string ________________(___________);
            printf("%d\n",___[________________]);
        }
    }
    return _______________________;
}
